package com.zoubworld.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.zoubworld.utils.IParsable;
import com.zoubworld.utils.ParsableList;


/** generics parsable class
 * 
 * used with ParseFile(List<IParsable> classList, String filename)
 * 
 * example it can parse : 
 BIN   6 |    9|    9   6.4 |

        | Handler 'a'
SOCKET  | S0A | S0B | S1A | S1B | S2A | S2B | S3A | S3B | count     %  | Bin name
        |-----|-----|-----|-----|-----|-----|-----|-----|--------------|---------------
PASSED  |    5|    5|    5|    5|    0|    5|    5|    5|    35  25.0  |
FAILED  |    5|    5|    5|    5|    0|    5|    5|    5|    35  25.0  |
        |     |     |     |     |     |     |     |     |              |
BIN   1 |    5|    5|    5|    5|    0|    5|    5|    5|    35  25.0  | "Pass_pb"
BIN 467 |    0|    0|    0|    0|    0|    1|    0|    0|     1   0.7  | "Twi_fb"
BIN 494 |    0|    0|    0|    0|    0|    4|    0|    0|     4   2.9  | "Dac_fb"
BIN 502 |    0|    0|    0|    0|    0|    0|    0|    0|     0   0.0  | "Bandgap_fb"
BIN 901 |    5|    5|    5|    5|    0|    0|    5|    5|    30  21.4  | "Shorts_fb"
BIN 924 |    0|    0|    0|    0|    0|    0|    0|    0|     0   0.0  | "Pulldowns_fb"

        | Handler 'a'
SOCKET  | S4A | S4B | S5A | S5B | S6A | S6B | S7A | S7B | count     %  | Bin name
        |-----|-----|-----|-----|-----|-----|-----|-----|--------------|---------------
PASSED  |    0|    5|    5|    5|    5|    5|    5|    5|    35  25.0  |
FAILED  |    0|    5|    5|    5|    5|    5|    5|    5|    35  25.0  |
        |     |     |     |     |     |     |     |     |              |
BIN   1 |    0|    5|    5|    5|    5|    5|    5|    5|    35  25.0  | "Pass_pb"
BIN 467 |    0|    3|    0|    0|    0|    0|    0|    0|     3   2.1  | "Twi_fb"
BIN 494 |    0|    0|    0|    0|    0|    0|    0|    0|     0   0.0  | "Dac_fb"
BIN 502 |    0|    1|    0|    0|    0|    0|    0|    0|     1   0.7  | "Bandgap_fb"
BIN 901 |    0|    0|    5|    5|    5|    5|    5|    5|    30  21.4  | "Shorts_fb"
BIN 924 |    0|    1|    0|    0|    0|    0|    0|    0|     1   0.7  | "Pulldowns_fb"

 * from code :
 * ParsableList PSL_SOCKET=new ParsableList("\\|","SOCKET");
		ParsableList PSL_PASSED=new ParsableList("\\|","PASSED");
		ParsableList PSL_FAILED=new ParsableList("\\|","FAILED");
		ParsableList PSL_Bins=new ParsableList("\\|","BIN \\d+");
		  handlermap.add(PSL_SOCKET);
		  handlermap.add(PSL_PASSED);
		  handlermap.add(PSL_Bins);
		handlermap=JavaUtils.ParseFile(handlermap,filelines.split("\\n") ,(String)null); 

 * */
public class ParsableList implements IParsable {

	public ParsableList(String mySeparator,String  mykey) {
		super();
		separator=mySeparator;
		key=mykey;
		begin="";
		stop="";
	}
	/*
	 * use case :
ranges: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.38100001215934753, 0.0, 0.38199999928474426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4009999930858612, 0.39800000190734863, 0.39399999380111694, 0.39399999380111694, 0.3959999978542328, 0.3970000147819519, 0.0, 0.39800000190734863, 0.4009999930858612, 0.0, 0.0, 0.0, 0.0, 0.5440000295639038, 0.5329999923706055, 0.0, 0.4449999928474426, 0.4390000104904175, 0.43799999356269836, 0.4399999976158142, 0.4339999854564667, 0.43299999833106995, 0.0, 0.4300000071525574, 0.43299999833106995, 0.43799999356269836, 0.44200000166893005, 0.4449999928474426, 0.44999998807907104, 0.4390000104904175, 0.0, 0.43525001406669617, 0.0, 0.43424999713897705, 0.43424999713897705, 0.43149998784065247, 0.0, 0.0, 0.0, 0.0, 0.8209999799728394, 0.828000009059906, 0.8389999866485596, 0.8500000238418579, 0.8610000014305115, 0.8740000128746033, 0.0, 0.8870000243186951, 0.8999999761581421, 0.9129999876022339, 0.9279999732971191, 0.9419999718666077, 0.9589999914169312, 0.9760000109672546, 0.0, 0.9900000095367432, 1.0180000066757202, 1.027999997138977, 1.0460000038146973, 1.065000057220459, 1.0880000591278076, 0.0, 1.1089999675750732, 1.13100004196167, 1.1549999713897705, 1.1799999475479126, 1.2059999704360962, 1.2339999675750732, 0.0, 1.2619999647140503, 1.2920000553131104, 1.3209999799728394, 1.3539999723434448, 1.3819999694824219, 0.0, 1.3380000591278076, 1.3300000429153442, 1.3220000267028809, 0.0, 1.3170000314712524, 1.3029999732971191, 1.2910000085830688, 1.277999997138977, 1.2419999837875366, 0.0, 0.0, 1.3990000486373901, 0.0, 1.3960000276565552, 1.3930000066757202, 1.3910000324249268, 1.3880000114440918, 1.3849999904632568, 1.3819999694824219, 1.378999948501587, 1.3769999742507935, 1.3760000467300415, 1.371999979019165, 0.0, 1.371000051498413, 1.36899995803833, 1.3680000305175781, 1.3669999837875366, 1.3669999837875366, 1.3630000352859497, 1.3650000095367432, 1.3619999885559082, 1.3630000352859497, 0.0, 0.9179999828338623, 0.9089999794960022, 0.9079999923706055, 0.9089999794960022, 0.9089999794960022, 0.9129999876022339, 0.9139999747276306, 0.9070000052452087, 0.8949999809265137, 0.8610000014305115, 0.0, 0.8669999837875366, 0.871999979019165, 0.875, 0.8759999871253967, 0.8769999742507935, 0.8790000081062317, 0.9129999876022339, 0.0, 0.9139999747276306, 0.9160000085830688, 0.9210000038146973, 0.925000011920929, 0.9179999828338623, 0.9210000038146973, 0.9369999766349792, 0.0, 0.0, 0.0, 0.9010000228881836, 0.9039999842643738, 0.9129999876022339, 0.9229999780654907, 0.9309999942779541, 0.9419999718666077, 0.9449999928474426, 0.9430000185966492, 0.0, 0.8560000061988831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16500000655651093, 0.164000004529953, 0.16224999725818634, 0.16075000166893005, 0.0, 0.0, 1.7369999885559082, 1.7120000123977661, 1.7100000381469727, 1.7330000400543213, 1.7599999904632568, 1.7929999828338623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.559999942779541, 0.0, 2.678999900817871, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7380000352859497, 0.0, 0.0, 1.5759999752044678, 0.0, 1.5019999742507935, 1.4889999628067017, 0.0, 1.4229999780654907, 0.0, 1.4160000085830688, 1.3849999904632568, 1.0989999771118164, 1.0829999446868896, 1.0670000314712524, 1.0509999990463257, 1.0390000343322754, 1.0240000486373901, 0.0, 1.0099999904632568, 0.996999979019165, 0.9869999885559082, 0.9729999899864197, 0.9620000123977661, 0.9480000138282776, 0.9330000281333923, 0.921999990940094, 0.9120000004768372, 0.9020000100135803, 0.8920000195503235, 0.8830000162124634, 0.8740000128746033, 0.0, 0.8650000095367432, 0.8560000061988831, 0.8489999771118164, 0.8410000205039978, 0.8320000171661377, 0.824999988079071, 0.8169999718666077, 0.8100000023841858, 0.8029999732971191, 0.7960000038146973, 0.7889999747276306, 0.7820000052452087, 0.7760000228881836, 0.0, 0.7710000276565552, 0.7649999856948853, 0.7590000033378601, 0.753000020980835, 0.7480000257492065, 0.7429999709129333, 0.7450000047683716, 0.7409999966621399, 0.7319999933242798, 0.7289999723434448, 0.7099999785423279, 0.7170000076293945, 0.0, 0.0, 0.6890000104904175, 0.6859999895095825, 0.6819999814033508, 0.6830000281333923, 0.6830000281333923, 0.6819999814033508, 0.6790000200271606, 0.6759999990463257, 0.6779999732971191, 0.17425000667572021, 0.6880000233650208, 0.0, 0.6480000019073486, 0.0, 0.0, 0.0, 0.0, 0.18025000393390656, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6269999742507935, 0.0, 0.6259999871253967, 0.6230000257492065, 0.621999979019165, 0.621999979019165, 0.621999979019165, 0.6209999918937683, 0.6209999918937683, 0.6209999918937683, 0.6230000257492065, 0.628000020980835, 0.0, 0.6309999823570251, 0.6309999823570251, 0.6299999952316284, 0.6320000290870667, 0.6320000290870667, 0.6340000033378601, 0.6359999775886536, 0.6370000243186951, 0.6389999985694885, 0.0, 0.6399999856948853, 0.6420000195503235, 0.6430000066757202, 0.6449999809265137, 0.6470000147819519, 0.6489999890327454, 0.6499999761581421, 0.652999997138977, 0.6549999713897705, 0.0, 0.6570000052452087, 0.6589999794960022, 0.6620000004768372, 0.6639999747276306, 0.6669999957084656, 0.6679999828338623, 0.671999990940094, 0.675000011920929, 0.0, 0.6779999732971191, 0.6800000071525574, 0.6840000152587891, 0.6859999895095825, 0.6899999976158142, 0.6930000185966492, 0.6970000267028809, 0.699999988079071, 0.703000009059906, 0.0, 0.7070000171661377, 0.7110000252723694, 0.7149999737739563, 0.718999981880188, 0.7229999899864197, 0.7269999980926514, 0.7319999933242798, 0.0, 0.7360000014305115, 0.7400000095367432, 0.7450000047683716, 0.75, 0.7540000081062317, 0.7590000033378601, 0.7630000114440918, 0.7689999938011169, 0.0, 0.7739999890327454, 0.7799999713897705, 0.0, 0.7540000081062317, 0.7739999890327454, 0.7699999809265137, 0.7570000290870667, 0.75, 0.7409999966621399, 0.734000027179718, 0.7260000109672546, 0.718999981880188, 0.7120000123977661, 0.0, 0.7049999833106995, 0.6990000009536743, 0.6919999718666077, 0.6859999895095825, 0.6800000071525574, 0.6740000247955322, 0.6679999828338623, 0.6629999876022339, 0.6570000052452087, 0.6510000228881836, 0.6460000276565552, 0.6420000195503235, 0.6370000243186951, 0.6309999823570251, 0.0, 0.6269999742507935, 0.621999979019165, 0.6179999709129333, 0.6129999756813049, 0.609000027179718, 0.6050000190734863, 0.6019999980926514, 0.597000002861023, 0.5929999947547913, 0.5899999737739563, 0.5860000252723694, 0.5820000171661377, 0.0, 0.5789999961853027, 0.574999988079071, 0.5720000267028809, 0.5690000057220459, 0.5659999847412109, 0.5630000233650208, 0.5600000023841858, 0.5569999814033508, 0.5540000200271606, 0.5519999861717224, 0.5490000247955322, 0.0, 0.5460000038146973, 0.5440000295639038, 0.5410000085830688, 0.5389999747276306, 0.5360000133514404, 0.5339999794960022, 0.5320000052452087, 0.5299999713897705, 0.527999997138977, 0.5260000228881836, 0.5239999890327454, 0.5220000147819519, 0.0, 0.5199999809265137, 0.5189999938011169, 0.5170000195503235, 0.5149999856948853, 0.5139999985694885, 0.5120000243186951, 0.5099999904632568, 0.5090000033378601, 0.5080000162124634, 0.5070000290870667, 0.5049999952316284, 0.0, 0.5040000081062317, 0.503000020980835, 0.5040000081062317, 0.5009999871253967, 0.5, 0.49799999594688416, 0.49799999594688416, 0.4970000088214874, 0.4959999918937683, 0.4959999918937683, 0.0, 0.4950000047683716, 0.4950000047683716, 0.49399998784065247, 0.49300000071525574, 0.492000013589859, 0.492000013589859, 0.49000000953674316, 0.49000000953674316, 0.49000000953674316, 0.48899999260902405, 0.17524999380111694, 0.49000000953674316, 0.4909999966621399, 0.4950000047683716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1899999976158142, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
**/
	public ParsableList(String mySeparator,String  mykey,String  mybegin,String  mystop) {
		super();
		separator=mySeparator;
		key=mykey;
		begin=mybegin;
		stop=mystop;
	}
	public String toString()
	{
		return "ParsableList("+key+begin+"("+separator+".*)*+"+stop+")";
	}
	/**
	 * @return the p0
	 */
	public Pattern getP0() {
		if (p0==null)
		p0=Pattern.compile("^\\s*"+key+"\\s*"+begin+"\\s*(\\s*"+separator+"\\s*.*)\\s*"+stop+"\\s*$");
		return p0;
	}

	List<String> value=null;
	String separator=null;
	String key=null;
	String begin=null;
	String stop=null;
	@SuppressWarnings("unused")
	private ParsableList()
	{
		super();
	}
	
	private Pattern p0=null;
	/**
	 * select item from ps that match this object.
	*/
	public Set<IParsable> select( Set<IParsable> ps)
	{
		Set<IParsable> set=new HashSet<IParsable>();
		for(IParsable s:ps)
			if ( s instanceof ParsableList) 
			if ( (((ParsableList)s).separator==separator) 
				&&(((ParsableList)s).key==key) )
				set.add(s);
		return set;
		
	}
	
		public static Map<String,List<String>> GetMap(List<IParsable> classList)
		{
			if (classList==null)
				return null;
			Map<String,List<String>> map=new HashMap<String,List<String>>();
			for(IParsable ps:classList)
				if ( ps instanceof ParsableList) 
					if(((ParsableList)ps).key!=null)
						if(((ParsableList)ps).value!=null)
							if(map.containsKey(((ParsableList)ps).key))
							{
								List<String> l=new ArrayList<String>();
								l.addAll(((ParsableList)ps).value);
								l.addAll(map.get(((ParsableList)ps).key));
								map.put(((ParsableList)ps).key, l);	
							}
							else
				map.put(((ParsableList)ps).key, ((ParsableList)ps).value);
			return map;
			
		}
	public IParsable Parse(String line) {
		
			
		Matcher m=null;

		 if ((m=getP0().matcher(line))!=null)
		 if ((m).find())    		 
	 {
			 String[] tab=line.split(separator);
			 ParsableList tc= new ParsableList(this.separator,tab[0].trim()); 	
			 if (tc.value==null)
			 	tc.value=new ArrayList<String>();
			
			 for(int i=1;i<tab.length;i++)
				 tc.value.add(tab[i].trim());
			
		return tc;
		}
		return null;
	}

	public List<String> getValue() {
		return value;
	}
/*	public String getSymbol() {
		return symbol;
	}*/
	public String getKey() {
		return key;
	}
	@Override
	public String get() {
		// TODO Auto-generated method stub
		return getValue().toString();
	}

	@Override
	/** return List<String>
	 * */
	public List<String> getList() {
	
		return value;
	}	

}